
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.YearMonth;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Miko ja Nastia
 */
public class AvailabilityCalendar extends javax.swing.JDialog {
    DefaultTableModel mtblCalendar;
   public static int realYear, realMonth, realDay, currentYear, currentMonth;
    
    public static int kalenterikuu;
    public static int vuosi;


    /**
     * Creates new form AvailabilityCalendar
     */
    public AvailabilityCalendar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void startcalendar() throws SQLException, ParseException {
        GregorianCalendar cal = new GregorianCalendar(); //Create calendar
		realDay = cal.get(GregorianCalendar.DAY_OF_MONTH); //Get day
		realMonth = cal.get(GregorianCalendar.MONTH); //Get month
		realYear = cal.get(GregorianCalendar.YEAR); //Get year
		currentMonth = (realMonth + 1); //Match month and year
		currentYear = realYear;
                
                 
                 
                 setTable(currentMonth, currentYear);
                 
    }

   
    public void setTable(int guugaus, int vuos) throws SQLException, ParseException {
   
	
        
        	
		
                
                

                
                
    YearMonth yearMonthObject = YearMonth.of(currentYear, guugaus);
    int daysInMonth = yearMonthObject.lengthOfMonth();
    
    String[] col = new String[daysInMonth + 1];
    col[0] = "Pöytä:";
    for (int i = 0; i < daysInMonth ; i ++) {
        col[i + 1] = "" + (i + 1);
    }
    DefaultTableModel tablemodel = new DefaultTableModel(col, 0);
    AccessToMysql mysql = new AccessToMysql();
    mysql.connectah();
    tablemodel = mysql.getcalendarmodel(tablemodel, guugaus, currentYear);
    
    mysql.closeConnect();
    this.tblCalendar.setModel(tablemodel);
    
     
    
    
    
    
    tblCalendar.setDefaultRenderer(tblCalendar.getColumnClass(0), new tblCalendarRenderer());
    
    
        this.tblCalendar.setDefaultEditor(Object.class, null);
        
        kalenterikuu = guugaus;
        vuosi = vuos;
        
       
switch (kalenterikuu) {
  case 1:
    kuukausi.setText("Tammikuu");
    break;
  case 2:
   kuukausi.setText("Helmikuu");
    break;
  case 3:
    kuukausi.setText("Maaliskuu");
    break;
  case 4:
     kuukausi.setText("Huhtikuu");
    break;
  case 5:
    kuukausi.setText("Toukokuu");
    break;
  case 6:
     kuukausi.setText("Kesäkuu");
    break;
  case 7:
     kuukausi.setText("Heinäkuu");
    break;
      case 8:
    kuukausi.setText("Elokuu");
    break;
  case 9:
   kuukausi.setText("Syyskuu");
    break;
  case 10:
    kuukausi.setText("Lokakuu");
    break;
  case 11:
     kuukausi.setText("Marraskuu");
    break;
  case 12:
    kuukausi.setText("Joulukuu");
    break;
}
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCalendar = new javax.swing.JTable();
        kuukausi = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblCalendar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCalendar);

        kuukausi.setText("Kuukausi");

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1029, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(kuukausi, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(452, 452, 452))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kuukausi)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       kalenterikuu ++;
       if (kalenterikuu == 13) {
           kalenterikuu = 1;
           currentYear ++;
       }
        try {
            setTable(kalenterikuu, vuosi);
        } catch (SQLException ex) {
            Logger.getLogger(AvailabilityCalendar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AvailabilityCalendar.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        kalenterikuu --;
        
        if (kalenterikuu == 0) {
            kalenterikuu = 12;
            currentYear --;
        }
        try {
            setTable(kalenterikuu, vuosi);
        } catch (SQLException ex) {
            Logger.getLogger(AvailabilityCalendar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AvailabilityCalendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvailabilityCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvailabilityCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvailabilityCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvailabilityCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AvailabilityCalendar dialog = new AvailabilityCalendar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    	static class tblCalendarRenderer extends DefaultTableCellRenderer{
		public Component getTableCellRendererComponent (JTable table, Object value, boolean selected, boolean focused, int row, int column){
				super.getTableCellRendererComponent(table, value, selected, focused, row, column);
                                
                                
                              String tulos = (String) table.getValueAt(row, column);
                              
                             
                              
                              if (tulos != null) {
                                  if (tulos.equals("     X")) {
                                      setBackground(Color.RED);
                                  }
                                  
                                  else if(tulos.equals("     0")) {
                                      setBackground(Color.green);
                                  }
                                 
                                  else {
                                      setBackground(Color.white);
                                  }
                              }
                        
			setBorder(null);
			setForeground(Color.black);
			return this;  
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kuukausi;
    private javax.swing.JTable tblCalendar;
    // End of variables declaration//GEN-END:variables
}
