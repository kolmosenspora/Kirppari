/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;



public class allPrinters extends javax.swing.JDialog {
public static String printerName = "Star TSP100 Cutter (TSP143)(kopio 1)";
public static String provisioni = "0";
public static double provisiodouble = 0;
public static String varmuuskopio = "";
String backup = "";
String mysqlpath = new String();
String password;
String username;
String database;
String mysqldump;

   
public ArrayList<String> printers = new ArrayList<String>();

    public allPrinters(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public void setPrinters() {
         PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);
        System.out.println("Number of print services: " + printServices.length);

        for (PrintService printer : printServices) { 
        printers.add(printer.getName());
        }
        
    MakingListModels makinglistmodels = new MakingListModels();
    
    this.jList1.setModel(makinglistmodels.getoneModel(printers));
        
        this.tulostinteksti.setText(printerName);
      
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tulostinteksti = new javax.swing.JLabel();
        testPrinterbtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Käyttää tulostinta:");

        tulostinteksti.setText("jLabel3");

        testPrinterbtn.setText("Testaa tulostimen toimivuus");
        testPrinterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testPrinterbtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Tulostimet");

        jButton2.setText("Tallenna muutokset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Varmuuskopio");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Hae aikaisempi varmuuskopio");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Mysql sijainti");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Mysql asetukset");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Mysql dump sijainti");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tulostinteksti, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(testPrinterbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(552, 552, 552)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tulostinteksti))
                .addGap(18, 18, 18)
                .addComponent(testPrinterbtn)
                .addGap(110, 110, 110)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(22, 22, 22)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
       JList lista = (JList)evt.getSource();
    if (evt.getClickCount() == 2) {
        int indexi = lista.locationToIndex(evt.getPoint());
       Mainclass.printerName = printers.get(indexi);
       this.tulostinteksti.setText(Mainclass.printerName);
    }
    }//GEN-LAST:event_jList1MouseClicked

    private void testPrinterbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testPrinterbtnActionPerformed
        PrinterService printerService = new PrinterService();
     
   
    
    SimpleDateFormat time_formatter = new SimpleDateFormat("dd-MM-yyyy_HH:mm:ss");
    String current_time_str = time_formatter.format(System.currentTimeMillis());
    
    String tulostetaan = "Tulostin on toiminnassa ja käytettävissä! " + "\n" + "\n" + "\n" + "\n" + "Tulostin on toiminnassa ja käytettävissä!";
    
    String aika = current_time_str;
    
   
   
            printerService.printString(Mainclass.printerName, "\n\n Kampinkirpputori \n "
                    +  aika
                  + " \n" + tulostetaan
                
                
                
                
                
               
                );

        // cut that paper!
               byte[] empty = new byte[] {27,100, 10};
        byte[] cutP = new byte[] {27,109, 3};
        
        printerService.printBytes(Mainclass.printerName, empty);
        printerService.printBytes(Mainclass.printerName, cutP);
    }//GEN-LAST:event_testPrinterbtnActionPerformed
public void loadstuff() {
     File configFile = new File("config.properties");
    try {
    FileReader reader = new FileReader(configFile);
    Properties props = new Properties();
    props.load(reader);
 
    printerName = props.getProperty("printer");
   String provisio = props.getProperty("provisio");
   String provisiodouble = props.getProperty("provisiodouble");
 String   path = props.getProperty("path");
    mysqlpath = props.getProperty("mysql");
    username = props.getProperty("username");
    database = props.getProperty("database");
    password = props.getProperty("password");
    mysqldump = props.getProperty("mysqldump");
    
    Makingbackup.mysqlpath = mysqlpath;
    Makingbackup.path = path;   
   
    allPrinters.provisioni = provisio;
    Double Provikat = 1 - Double.parseDouble(provisiodouble);
    allPrinters.provisiodouble = (Provikat);
    
 
  
    System.out.println(provisiodouble);
    reader.close();
} catch (FileNotFoundException ex) {
    // file does not exist
} catch (IOException ex) {
    // I/O error
}
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File configFile = new File("config.properties");
 
try {
    Properties props = new Properties();
    props.setProperty("printer", printerName);
    props.setProperty("provisio", provisioni);
    props.setProperty("provisiodouble", "" + Double.parseDouble(provisioni) / 100);
    props.setProperty("path", varmuuskopio);
    props.setProperty("mysql", mysqlpath);
        props.setProperty("username", username);
    props.setProperty("password", password);
    props.setProperty("database", database);
     props.setProperty("mysqldump", mysqldump);
    FileWriter writer = new FileWriter(configFile);
    props.store(writer, "host settings");
    writer.close();
} catch (FileNotFoundException ex) {
    // file does not exist
} catch (IOException ex) {
    // I/O error
}
   


try {
    FileReader reader = new FileReader(configFile);
    Properties props = new Properties();
    props.load(reader);
 
    String printer = props.getProperty("printer");
    String provisio = props.getProperty("provisio");
    String provisiodouble = props.getProperty("provisiodouble");
    String path = props.getProperty("path");
    String mysqlpath = props.getProperty("mysql");
    
    Makingbackup.mysqlpath = mysqlpath;
    Makingbackup.path = path;   
    allPrinters.printerName = printer;
    Mainclass.printerName = printer;
    allPrinters.provisioni = provisio;
    Double Provikat = 1 - Double.parseDouble(provisiodouble);
    allPrinters.provisiodouble = (Provikat);
    
 
    System.out.print("Host name is: " + printer + " " + provisio);
    System.out.println(provisiodouble);
    reader.close();
} catch (FileNotFoundException ex) {
    // file does not exist
} catch (IOException ex) {
    // I/O error
}
JOptionPane.showMessageDialog(rootPane, "Asetukset tallennettu!");
dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fc = new JFileChooser();
                    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Component frame = null;
                    int returnVal = fc.showSaveDialog(frame);
                   
                    varmuuskopio = fc.getSelectedFile().toString();
                    
                    System.out.println(varmuuskopio);
                    
                    Makingbackup.path = varmuuskopio;
                      File configFile = new File("config.properties");
                      
                   try {
    Properties props = new Properties();
    props.setProperty("printer", printerName);
    props.setProperty("provisio", provisioni);
    props.setProperty("provisiodouble", "" + Double.parseDouble(provisioni) / 100);
    props.setProperty("path", varmuuskopio);
    props.setProperty("mysql", mysqlpath);
        props.setProperty("username", username);
    props.setProperty("password", password);
    props.setProperty("database", database);
     props.setProperty("mysqldump", mysqldump);
     props.setProperty("path", varmuuskopio);
    FileWriter writer = new FileWriter(configFile);
    props.store(writer, "host settings");
    writer.close();
} catch (FileNotFoundException ex) {
    // file does not exist
} catch (IOException ex) {
    // I/O error
}
                    
                    Makingbackup.Backupdbtosql();
                     JOptionPane.showMessageDialog(rootPane, "Varmuuskopio onnistui!");
                    
                    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      
        JOptionPane.showMessageDialog(this, "VAROITUS! Tiedätkö mitä olet tekemässä?");
        
        String turva = JOptionPane.showInputDialog("Näppäile 123456789 varmistaaksesi ymmärryksesi mitä olet tekemässä!");
        
        if (turva.equals("123456789")) {
        JFileChooser chooser = new JFileChooser();
chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    int returnVal = chooser.showOpenDialog(this);
if(returnVal == JFileChooser.APPROVE_OPTION) {
  
   backup = chooser.getSelectedFile().getAbsolutePath();
   
   Makingbackup.restorePath = backup;
   
   Makingbackup.Restoredbfromsql(backup);
   JOptionPane.showMessageDialog(rootPane, "Varmuuskopion palautus onnistui!");
}
else {
    JOptionPane.showMessageDialog(rootPane, "Varmuuskopiota ei tehty");
}
}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
            JFileChooser chooser = new JFileChooser();
chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    int returnVal = chooser.showOpenDialog(this);
if(returnVal == JFileChooser.APPROVE_OPTION) {
    
   
    mysqlpath = chooser.getSelectedFile().getAbsolutePath();
    mysqlpath = mysqlpath.replace(".exe", "");
  
   Makingbackup.mysqlpath = mysqlpath;
   
   
   
  
   
   
   
}
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      database = JOptionPane.showInputDialog("Anna databasen nimi");
       username = JOptionPane.showInputDialog("Anna käyttäjätunnus");
     password = JOptionPane.showInputDialog("Anna salasana");
      
      AccessToMysql.database = database;
      AccessToMysql.username = username;
      AccessToMysql.password = password;
  
      
      
    }//GEN-LAST:event_jButton6ActionPerformed
    public static void varmuuskopioi() {
              JFileChooser fc = new JFileChooser();
            
                    
                    Makingbackup.path = varmuuskopio;
                    
                    Makingbackup.Backupdbtosql();
                    System.out.println("Varmuuskopio onnistui");
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
                 JFileChooser chooser = new JFileChooser();
chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    int returnVal = chooser.showOpenDialog(this);
if(returnVal == JFileChooser.APPROVE_OPTION) {
    
   
    mysqldump = chooser.getSelectedFile().getAbsolutePath();
    mysqldump = mysqldump.replace(".exe", "");
  
   Makingbackup.mysqldump = mysqldump;
   
   
}
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(allPrinters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(allPrinters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(allPrinters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(allPrinters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                allPrinters dialog = new allPrinters(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton testPrinterbtn;
    private javax.swing.JLabel tulostinteksti;
    // End of variables declaration//GEN-END:variables
}
