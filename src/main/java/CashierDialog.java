
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Miko ja Nastia
 */
public class CashierDialog extends javax.swing.JDialog {

    int kuittinumero = 0;
    float vaihtoraha = 0;
    float yhteensafloat = 0;
    int kuitinkorjaustilanne = 0;
    int kuittiin = 2;
    
     String col[] = {"Myyntiid", "Pöytä","Seuranta","Hinta"};     
  DefaultTableModel tableModel = new DefaultTableModel(col, 0);
  
  String adding[];
  
 
    
    public CashierDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        price = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        joku = new javax.swing.JLabel();
        table = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        saletable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        recipenumber = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        seuranta = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        exchange = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        kuittikorjausbtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        takaisin = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        yhteensa = new javax.swing.JLabel();
        korjataan = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Hinta:");

        joku.setText("Pöytä:");

        saletable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        saletable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saletableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(saletable);

        jLabel2.setText("Kuitti NRO:");

        recipenumber.setText("jLabel3");

        jLabel3.setText("Seuranta:");

        seuranta.setText("-");
        seuranta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seurantaActionPerformed(evt);
            }
        });

        jButton1.setText("Laske vaihtoraha");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Pankkikortti");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Käteinen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        kuittikorjausbtn.setText("Korjaa kuitti");
        kuittikorjausbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kuittikorjausbtnActionPerformed(evt);
            }
        });

        jButton5.setText("Ok");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton5KeyPressed(evt);
            }
        });

        jLabel4.setText("Takaisin:");

        takaisin.setText("0.0");

        jLabel5.setText("Yhteensä:");

        yhteensa.setText("0.0");

        jButton4.setText("Tulosta kuitti");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(yhteensa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(exchange, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(takaisin)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(93, 93, 93)
                                    .addComponent(joku)
                                    .addGap(18, 18, 18)
                                    .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(55, 55, 55)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(seuranta, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(recipenumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kuittikorjausbtn)))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(korjataan, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(495, 495, 495))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kuittikorjausbtn)
                    .addComponent(jButton4))
                .addGap(4, 4, 4)
                .addComponent(korjataan, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(joku)
                    .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(seuranta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(recipenumber)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel4)
                            .addComponent(takaisin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exchange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(6, 6, 6)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(yhteensa))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
  
        float summa = Float.parseFloat(price.getText());
        int poytaid = Integer.parseInt(table.getText());
        int myyjaid = 0;
        String seurantastring = seuranta.getText();
        int kuitattu = 0;
        int checkiftableexists = 0;
       int alepvm = 0;
       
        
        
        AccessToMysql mysql = new AccessToMysql();
        mysql.connectah();
        
        
        try {
            alepvm = mysql.getsaleday(poytaid);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if (alepvm == 1) {
            summa = (float) (summa * 0.5);
        }
        
        
 

        
        try {
            checkiftableexists = mysql.checkiftableexist(poytaid);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if (checkiftableexists != 0) {
        
        
       
        try {
            myyjaid = mysql.getmyyjafromtable(poytaid);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (myyjaid == 0) {
        try {
            mysql.addmyynti(summa, 1, seurantastring, kuitattu, poytaid);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        else {
         try {
            mysql.addmyynti(summa, myyjaid, seurantastring, kuitattu, poytaid);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
       
        
        adding = new String[4];
        try {
            adding[0] = "" + mysql.getHighestmyyntiid();
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        adding[1] = "" + poytaid;
        adding[2] = seurantastring;
        adding[3] = "" + summa;
        
        tableModel.addRow(adding);
        
        setSaleTable();
        yhteensafloat = yhteensafloat + summa;
        setYhteensa();
        
          try {
            mysql.closeConnect();
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
          
          price.setText("");
          table.setText("");
          seuranta.setText("-");
          price.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(this, "Pöytää ei ole olemassa");
            table.requestFocus();
        }
        
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed
    public void setSaleTable() {
     
  
  saletable.setModel(tableModel);
  this.saletable.setDefaultEditor(Object.class, null);
 

    }
    
    public void setYhteensa() {
        DecimalFormat df = new DecimalFormat("#.##");

        yhteensa.setText("" + df.format(yhteensafloat));
    }
    
    private void seurantaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seurantaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seurantaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        vaihtoraha = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
           String summa = "" + tableModel.getValueAt(i, 3);
           float summani = Float.parseFloat(summa);
           vaihtoraha = vaihtoraha + summani;
        }
        float annettu = Float.parseFloat(exchange.getText());
        takaisin.setText("" + (annettu - vaihtoraha));
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            AccessToMysql mysql = new AccessToMysql();
            mysql.connectah();
    
        if (kuitinkorjaustilanne == 0) {
    
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String myyntiidstring = "" + tableModel.getValueAt(i, 0);
            int myyntiid = Integer.parseInt(myyntiidstring);
            
            try {
                mysql.addkuitti(kuittinumero, myyntiid);
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                mysql.pankkikorttimaksu(myyntiid);
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            
             
                
 
        }
        tulostakuitti(1);
             dispose();  
          
            }
        else if (kuitinkorjaustilanne == 1) {
            JOptionPane.showMessageDialog(this, "Kuitinkorjaus kesken! \n Voit vain poistaa kuitista tietoja");
        }
                        try {
                mysql.closeConnect();
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
                
             
            }
                   
                  
                    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
   
       
       if (kuitinkorjaustilanne == 0) {
             AccessToMysql mysql = new AccessToMysql();
       mysql.connectah();
       for (int i = 0; i < tableModel.getRowCount(); i++) {
            String myyntiidstring = "" + tableModel.getValueAt(i, 0);
            int myyntiid = Integer.parseInt(myyntiidstring);
            
            try {
                mysql.addkuitti(kuittinumero, myyntiid);
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                mysql.kateismaksu(myyntiid);
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            try {
                mysql.closeConnect();
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            tulostakuitti(0);
        dispose();
       }
       
         else if (kuitinkorjaustilanne == 1) {
                 JOptionPane.showMessageDialog(this, "Kuitinkorjaus kesken! \n Voit vain poistaa kuitista tietoja");
       }
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void saletableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saletableMouseClicked
       if (evt.getClickCount() == 2) {
           AccessToMysql mysql = new AccessToMysql();
           mysql.connectah();
           
        int indexi = saletable.rowAtPoint(evt.getPoint());
        float summa;
        String summastring;
        
        String[] options = new String[2]; 
        options[0] = "Älä tee mitään";
        options[1] = "Poista myynti";
                   
       Object selectionObject = JOptionPane.showInputDialog(this, "Choose", "Menu", JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
       String selectionString = selectionObject.toString();
        
           if (selectionString.equals(options[1])) {
               
               if (kuitinkorjaustilanne == 1) {
                   String tablevalueni = "" + saletable.getModel().getValueAt(indexi, 0);
                   int poistettavamyynti = Integer.parseInt(tablevalueni);
                   
                   try {
                       mysql.poistamyyntikuitsta(poistettavamyynti);
                   } catch (SQLException ex) {
                       Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   try {
                       mysql.poistamyynti(poistettavamyynti);
                   } catch (SQLException ex) {
                       Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
                   }
               }
               String tablevalue = "" + saletable.getModel().getValueAt(indexi, 3);
               yhteensafloat = yhteensafloat - Float.parseFloat(tablevalue);
               setYhteensa();
               DefaultTableModel tableModel = (DefaultTableModel) saletable.getModel();
               tableModel.removeRow(indexi);
               
               setSaleTable();
  
  
  
           
  
           System.out.println("jee");
           }
           
           try {
               mysql.closeConnect();
           } catch (SQLException ex) {
               Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
           }
       
       }
       
    }//GEN-LAST:event_saletableMouseClicked
       public void tulostakuitti(int maksutapa) {
           
           
     String maksutapapankkivaikateinen = "";

     if (maksutapa == 1) {
         maksutapapankkivaikateinen = "Pankkikortti";
     }
     else if (maksutapa == 0) {
         maksutapapankkivaikateinen = "Käteinen";
     }
     PrinterService printerService = new PrinterService();
     
     SimpleDateFormat time_formatterpvm = new SimpleDateFormat("dd.MM.yyyy");
    SimpleDateFormat time_formatteraika = new SimpleDateFormat("HH:mm:ss");
    String current_time_straika = time_formatteraika.format(System.currentTimeMillis());
    String current_time_strpvm = time_formatterpvm.format(System.currentTimeMillis());
    String tulostetaan = "";
    
    for (int i = 0; i < saletable.getRowCount(); i++) {
        tulostetaan = tulostetaan + "     " + saletable.getValueAt(i, 1) + "             " + saletable.getValueAt(i, 2) + "        " + saletable.getValueAt(i, 3) + "\n";
    }
    
    String aika = current_time_straika;
    String pvm = current_time_strpvm;
    

    String kuitti = new String();
    
            kuitti = "\n"
                    +"Runeberginkatu 8        Kuitti nro:" + kuittinumero + "\n" +
                     "00100 Helsinki          " + pvm + " \n" +
                     "040-1774123             " + aika + "\n" 
                    + "Kampin kirpputori\n" 
                    + "Runeberginkatu 8\n" 
                    +  "00100 Helsinki \n"
                    +"----------------------------------------- "
                    + "\n" 
                    + aika + "\n"
                    + "   Pöytä       Seuranta    Hinta \n"   
                    + tulostetaan 
                    +"\n"
                    +"-----------------------------------------\n"
                    +"Summa yht: " + yhteensafloat + "e \n"
                    + "Maksutapa: " + maksutapapankkivaikateinen + "\n"
                    + "Kiitos käynnistä ja tervetuloa uudelleen!\n" 
                    + "Aukioloajat: ma-pe 11 – 19, la-su 11-16\n" 
                    + "Westfold Oy, Y-tunnus: 2637776-2\n" 
                    + "www.kampinkirpputori.fi 	\n" 
                    +  "\n"             
                    ;
            
           
   
               printerService.printString(Mainclass.printerName, kuitti);
               
            
            
            
            

        // cut that paper!
        byte[] empty = new byte[] {27,100, 3};
        byte[] cutP = new byte[] {27,109, 3};
        
        printerService.printBytes(Mainclass.printerName, empty);
        printerService.printBytes(Mainclass.printerName, cutP);
      
    
}
    private void kuittikorjausbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kuittikorjausbtnActionPerformed
        
        if (kuitinkorjaustilanne == 1) {
            dispose();
        }
        
        
        
        
        else if (kuitinkorjaustilanne == 0) {
        AccessToMysql mysql = new AccessToMysql();
        mysql.connectah();
        String korjauskuitti = JOptionPane.showInputDialog("Syötä kuitin numero");
       korjataan.setText("KORJATAAN KUITTIA");
       kuittinumero = Integer.parseInt(korjauskuitti);
       recipenumber.setText("" + kuittinumero);
       String summastring;
       float summa;
       kuitinkorjaustilanne = 1;
       kuittikorjausbtn.setText("Kuitinkorjaus valmis");
       
          String col[] = {"Myyntiid", "Pöytä","Seuranta","Hinta"};  
     
            tableModel = new DefaultTableModel(col, 0);
        try {
            tableModel = mysql.getallmyyntifromkuitti(tableModel, kuittinumero);
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
       setSaleTable();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
                summastring = "" + tableModel.getValueAt(i, 3);
               summa = Float.parseFloat(summastring);
               yhteensafloat = yhteensafloat + summa;
                
            }
       yhteensa.setText("" + yhteensafloat);
        try {
            mysql.closeConnect();
        } catch (SQLException ex) {
            Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        
       
        
        
       
       
    }//GEN-LAST:event_kuittikorjausbtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       
        if (kuitinkorjaustilanne == 1 ) {
            AccessToMysql mysql = new AccessToMysql();
            mysql.connectah();
            try {
                kuittiin = mysql.getpankkikortti(kuittinumero);
            } catch (SQLException ex) {
                Logger.getLogger(CashierDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            tulostakuitti(kuittiin);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton5KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5KeyPressed
    public void setLabels() throws SQLException {
        AccessToMysql mysql = new AccessToMysql();
        mysql.connectah();
        kuittinumero = mysql.getHighestkuittiid() + 1;
        recipenumber.setText("" + kuittinumero);
        kuitinkorjaustilanne = 0;
        mysql.closeConnect();
        
         
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CashierDialog dialog = new CashierDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField exchange;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    public javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel joku;
    private javax.swing.JLabel korjataan;
    private javax.swing.JButton kuittikorjausbtn;
    public javax.swing.JTextField price;
    private javax.swing.JLabel recipenumber;
    private javax.swing.JTable saletable;
    private javax.swing.JTextField seuranta;
    private javax.swing.JTextField table;
    private javax.swing.JLabel takaisin;
    private javax.swing.JLabel yhteensa;
    // End of variables declaration//GEN-END:variables
}
